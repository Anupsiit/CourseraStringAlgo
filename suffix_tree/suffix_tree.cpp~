#include <iostream>
#include <map>
#include <string>
#include <vector>
#define pb push_back
#define MAX_CHAR 256
#define FOR(i,a,b) for(int i=a;i<b;i++)

using std::cin;
using std::cout;
using std::endl;
using std::map;
using std::string;
using std::vector;
using std::pair;

int const Letters = 27;
int const NA = -1;

typedef struct SuffixTreeNode{
  SuffixTreeNode *children[MAX_CHAR];
  SuffixTreeNode *suffixLink;
  int start,*end;
  int suffixIndex;
}Node;

Node *root = NULL; //pointer to the root node

Node *lastNewNode = NULL;
Node *activeNode = NULL;
int activeEdge = -1;
int activeLength = 0;
int remainingSuffixCount = 0;
int glEnd = -1;

Node *newNode(int start, int *end){
  Node *node = (Node*)malloc(sizeof(Node));
  FOR(i,0,MAX_CHAR){
    node->children[i] = NULL;
  }
  node->suffixLink = root;
  node->start = start;
  node->end = end;
  node->suffixIndex = -1;
  return node;
}

int edgeLength(Node *node){
  return *(node->end) - (node->start)+1;
}

bool walkDown(Node *currNode){
  if(activeLength >= edgeLength(currNode)){
    activeEdge += edgeLength(currNode);
    activeLength -= edgeLength(currNode);
    activeNode = currNode;
    return true;
  }
  return false;
}
  

  

// Build a suffix tree of the string text and return a vector
// with all of the labels of its edges (the corresponding 
// substrings of the text) in any order.
vector<string> ComputeSuffixTreeEdges(const string& text) {
  vector<string> result;
  // Implement this function yourself
  return result;
}

int main() {
  string text;
  cin >> text;
  vector<string> edges = ComputeSuffixTreeEdges(text);
  for (int i = 0; i < edges.size(); ++i) {
    cout << edges[i] << endl;
  }
  return 0;
}
